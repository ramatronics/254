----------------------------------------------------------------------------------------------
----------------------------------Testing Methodology-----------------------------------------
----------------------------------------------------------------------------------------------
1) A task periodically prints task status of each task in the system.
Refer to Task1 below

2) A task can allocate a fixed size of memory.
-Task 2, Task 3, Task 4, and Task 5 try to allocate the same size of memory

3) A task will get blocked if there is no memory available when os_mem_alloc() is called
-Task 3 and Task 5 have to wait for Task 2 and Task 4 to finish with their memory

4) A blocked on memory task will be resumed once enough memory is available in the system.
-Task 3 and Task 5 are executed after Task 2 and Task 4 are done, and they all finish executing at one point.

5) Create a testing scenario that multiple tasks with different priorities are all blocked waiting for memory. When memory becomes available, test whether it is the highest priority task that waits the longest that gets the memory first.
-It is the task with the lowest priority that waits the longest to get memory. The init method sets this up to work as Task 2, Task 3, Task 4, and Task 5 are givven different priorities. The order of execution is Task 2 -> Task 4 -> Task 3 -> Task 5; and since we only allocated 8 bytes of memory, only 1 task gets executed at a time. 
For example Task 4, Task 3, and Task 5 are all WAIT_MEM status while Task 2 is being executed. When Task 2 frees up it's used memory, Task 4 will be executed and Task 3 and Task 5 will be WAIT_MEM status. A similar process is repeated eliminating 1 thread every time, and eventually all tasks are executed.

----------------------------------------------------------------------------------------------
-------------------------------Method/Function Metadata---------------------------------------
----------------------------------------------------------------------------------------------
init() :: Initialize Task
This method first instantiates the memory pool and populates it with calling os_mem_alloc using the address of the initialized memory pool. It then begins to spawn each task concurrently and let them run, whether they get executed or not totally depends on the priority of the task and the memory they're able to access.
Task 1 and Task 2 are first intiated with different priorities. Then after a 5 period wait, task 4 and 5 are intiated with different priorities.
Then the method waits for a period of 20 and starts to free the memory it has been using by calling os_mem_free with the address of the memory pool and the block to free. It then closes itself.

All the tasks below should be waiting for this init() method to free it's memory.
----------------------------------------------------------------------------------------------

Task1() :: Periodically print status
This task periodically prints the task status of each system, with a priority of 1.

Task2() :: Allocate memory, with highest priority
This task allocates 8 bytes of memory for itself and waits a period of 10 periods to free the memory it has been using. This should be executed first

Task3() :: Allocate memory, with 3rd highest priority
This task allocates 8 bytes of memory for itself and waits a period of 10 periods to free the memory it has been using. This should be executed third.

Task4() :: Allocate memory, with 2nd highest priority
This task allocates 8 bytes of memory for itself and waits a period of 10 periods to free the memory it has been using. This should be executed second.

Task5() :: Allocate memory, with lowest priority
This task allocates 8 bytes of memory for itself and waits a period of 10 periods to free the memory it has been using. This should be executed last.

----------------------------------------------------------------------------------------------
The order that it should be run is as follows:
Task 2 -> Task 4 -> Task 3 -> Task 5